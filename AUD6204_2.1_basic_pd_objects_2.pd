#N canvas 533 23 1088 751 10;
#X text 27 16 - if your mouse cursor is a hand it's in edit mode;
#X text 26 31 - if your mouse cursor is an arrow you're in performance/control
mode;
#X floatatom 32 237 5 0 0 0 - - -;
#X obj 81 136 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X floatatom 78 156 5 0 0 0 - - -;
#X obj 177 244 vradio 15 1 0 8 empty empty empty 0 -8 0 10 -262144
-1 -1 0;
#X obj 31 276 hradio 15 1 0 8 empty empty empty 0 -8 0 10 -262144 -1
-1 0;
#X floatatom 177 369 5 0 0 0 - - -;
#X floatatom 31 296 5 0 0 0 - - -;
#X obj 32 98 vsl 15 128 0 127 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 0 1;
#X text 17 70 vslider;
#X text 74 115 hslider;
#X text 31 256 hradio;
#X text 169 226 vradio;
#X obj 863 129 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X floatatom 893 128 5 0 0 0 - - -;
#X text 939 128 set number of bangs;
#X obj 16 490 random 5;
#X floatatom 59 464 0 0 0 0 - - -;
#X floatatom 16 515 0 0 0 0 - - -;
#X text 92 462 inlet to reset the range;
#X text 95 489 argument to initialize the range;
#X obj 15 464 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 10 442 random;
#X obj 21 662 pack;
#X obj 21 684 print;
#X msg 59 639 2;
#X floatatom 21 639 5 0 0 0 - - -;
#X obj 115 684 print;
#X msg 153 639 2;
#X floatatom 115 639 5 0 0 0 - - -;
#X obj 115 663 pack 0 0 0;
#X msg 185 640 31;
#X text 22 617 pack;
#X floatatom 337 699 0 0 0 0 - - -;
#X floatatom 452 698 0 0 0 0 - - -;
#X floatatom 490 698 0 0 0 0 - - -;
#X floatatom 303 699 0 0 0 0 - - -;
#X msg 303 628 1 2;
#X msg 342 628 3 4 shut;
#X msg 421 628 5 6 pick 7 8;
#X symbolatom 379 699 10 0 0 0 - - -;
#X obj 573 665 unpack;
#X msg 573 628 60 127;
#X floatatom 573 699 3 0 0 0 - - -;
#X floatatom 606 699 3 0 0 0 - - -;
#X obj 303 665 unpack 0 0 s f f;
#X text 301 611 unpack;
#X floatatom 549 154 5 0 0 0 - - -;
#X floatatom 510 206 5 0 0 0 - - -;
#X obj 529 154 bng 15 250 50 0 empty empty empty 20 7 0 12 -4034 -1
-1;
#X floatatom 317 206 5 0 0 0 - - -;
#X msg 317 98 bang;
#X msg 490 98 7 3 4;
#X obj 510 180 f;
#X obj 317 181 float 7;
#X msg 356 152 12;
#X msg 389 152 -0.02;
#X msg 331 127 555;
#X msg 510 121 list one 2 3;
#X text 589 120 does not work!;
#X text 352 97 outputs argument;
#X text 360 126 overrides argument;
#X text 370 182 stores value;
#X text 314 81 float;
#X msg 330 280 bang;
#X floatatom 320 363 0 0 0 0 - - -;
#X floatatom 320 258 0 0 0 0 - - -;
#X floatatom 359 311 0 0 0 0 - - -;
#X text 368 280 You can force the object to output the stored number.
;
#X text 365 258 You can set and output the value simoultaneously.;
#X text 387 311 You can store the number \, without outputting it.
;
#X obj 320 337 int 6.5;
#X text 319 240 int;
#X text 357 3 Play with each of these objects to get an idea of their
function;
#X text 357 32 Experiment with ways you connect these and the objects
we have already seen to create patches (e.g. a drum machine);
#X text 764 338 click me ------->;
#X text 874 322 A bit of a tangent;
#N canvas 0 23 436 331 message_variable_arguments 0;
#X text 32 11 Many objects accept arguments after the object name to
define the object's behavior or to initialize its value(s). We saw
examples in the last patch (e.g. "trigger bang bang" says create a
trigger object \, make two outputs both of which will output bangs)
;
#X text 61 173 click me ------->;
#X text 61 205 click me ------->;
#X text 62 236 click me ------->;
#X text 31 107 Creating messages with variable arguments is very useful
\, and something you should become familiar with as it gives us far
more flexibility to dynamically change aspects of our code;
#N canvas 57 23 737 543 variable_arguments_basics 0;
#X obj 16 113 vsl 10 70 0 127 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 0 1;
#X msg 16 197 I have \$1 potatoes;
#X obj 253 89 hsl 70 10 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 330 89 hsl 70 10 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 250 211 pack;
#X obj 327 109 t b f;
#X msg 250 233 yesterday I had \$1 potatoes \, now I have \$2 potatoes
;
#X obj 16 259 print very Irish concerns;
#X text 368 148 First the value from the silder is sent (via the right
outlet of the trigger) to the cold inlet of the pack object;
#X text 369 174 Then the trigger outputs a bang which triggers the
hot inlet of the pack object (it's as if the last value received by
the pack object is retriggered);
#X text 173 259 Watch the PD Window while changing the sliders above
;
#X text 27 286 ------------------------------------------------------------
;
#X text 366 108 <--- this is a convenient way of getting around the
hot & cold inlet design of the pack object (it actually works for loads
of objects);
#X text 26 5 A variable is created using $ followed by a number (e.g.
\$1/\$5);
#X text 25 35 The number relates to the position of the values in the
list the message receives (if the message only receives one thing \,
e.g. a number \, it treats it as if it is a list with only one element)
;
#X floatatom 106 329 5 0 0 0 - - -;
#X obj 148 354 t b f;
#X floatatom 148 330 5 0 0 0 - - -;
#X obj 187 355 t b f;
#X floatatom 187 331 5 0 0 0 - - -;
#X obj 106 394 pack 0 0 0;
#X obj 106 416 t l l;
#X obj 106 486 print original list;
#X msg 135 438 \$3 \$2 \$1;
#X obj 135 462 print reversed list;
#X text 109 313 \$1;
#X text 152 315 \$2;
#X text 192 316 \$3;
#X text 196 437 <---- the list is reversed here;
#X text 143 413 <----;
#X text 177 414 'l' is a convenient shorthand for list when using trigger
;
#X text 183 394 <--- remember "pack" converts the input into a list
;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 4 0;
#X connect 3 0 5 0;
#X connect 4 0 6 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X connect 6 0 7 0;
#X connect 15 0 20 0;
#X connect 16 0 20 0;
#X connect 16 1 20 1;
#X connect 17 0 16 0;
#X connect 18 0 20 0;
#X connect 18 1 20 2;
#X connect 19 0 18 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 21 1 23 0;
#X connect 23 0 24 0;
#X restore 172 176 pd variable_arguments_basics;
#N canvas 102 37 555 561 changing_internal_states/values 0;
#X text 38 8 A 'set' message combined with variables (\$1 \, \$2 \,
etc) is a powerful tool that allows you to change the internally stored
value of an object \, but not have the object output anything;
#X floatatom 231 90 5 0 0 0 - - -;
#X msg 231 111 set \$1;
#X obj 279 143 vsl 15 128 0 127 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 0 1;
#X floatatom 279 278 5 0 0 0 - - -;
#X floatatom 279 90 5 0 0 0 - - -;
#X text 26 88 Change the numbers in each box;
#X text 25 103 Note how the putting "set" before;
#X text 26 117 the number means that the slider;
#X text 29 132 display changes but the number;
#X text 29 149 is not output to the bottom number box;
#X floatatom 95 402 5 0 0 0 - - -;
#X msg 95 423 set \$1;
#X msg 144 423 set You owe me \$1 potatoes;
#X text 67 366 We can also change messages using "set" messages;
#X text 130 399 <---- change my value;
#X msg 95 476;
#X msg 144 476;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 5 0 3 0;
#X connect 11 0 12 0;
#X connect 11 0 13 0;
#X connect 12 0 16 0;
#X connect 13 0 17 0;
#X restore 171 207 pd changing_internal_states/values;
#N canvas 573 124 783 751 changing_parameters_and_appearances 0;
#X obj 22 191 hsl 70 10 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 109 191 hsl 70 10 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 106 211 t b f;
#X obj 98 255 pack 0 0 0;
#X obj 191 191 hsl 70 10 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 188 211 t b f;
#X msg 98 277 color \$1 \$2 \$3;
#X text 14 45 (Warning: As PD is open source \, you sometimes have
to do a bit of searching online to find what paramaters are actually
available for change and how you change them);
#X obj 300 190 hsl 70 10 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 378 190 hsl 70 10 0 127 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 297 240 pack;
#X obj 375 210 t b f;
#X msg 297 262 size \$1 \$2;
#X obj 103 319 hsl 80 76 0 127 0 0 empty empty I'm_a_label -2 -8 0
16 -90881 -42246 -241291 0 1;
#N canvas 606 577 632 360 randomiser 0;
#X obj 13 17 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1
;
#X obj 13 299 outlet;
#X obj 56 300 outlet;
#X obj 99 301 outlet;
#X obj 142 301 outlet;
#X obj 185 302 outlet;
#X text 235 98 This is essentially the same code we used to create
the random melody...;
#X text 30 17 <--- turn me on;
#X obj 13 40 metro 125;
#X text 236 150 And instead of setting the slider values but not outputting
them I have removed the "set \$1" message so the sliders are both set
and trtheir output is triggered;
#X obj 13 100 until;
#X obj 123 148 random 128;
#X obj 13 219 route 0 1 2 3 4;
#X obj 13 193 pack;
#X obj 13 124 t b b;
#N canvas 56 23 750 350 simpleCounter 0;
#X obj 385 98 +;
#X msg 509 45 0;
#X msg 385 59 0;
#X obj 454 178 + 1;
#X obj 385 41 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 385 263 5 0 0 0 - - -;
#X obj 385 158 % 8;
#X text 536 43 reset;
#X floatatom 597 43 5 0 0 0 - - -;
#X text 630 42 #beats in count;
#X obj 385 8 inlet;
#X obj 385 317 outlet;
#X text 13 58 1 - we want our count to go up by 1 each time \, but
we want to output 0 the first time;
#X text 14 98 2 - the 0 is added to the previous count (which starts
at 0 because there is no argument after '+');
#X text 14 153 3 - the count is passed through a modulo object (which
divides the output by 8 (due to the argument) and then outputs the
remainder.;
#X obj 509 8 inlet;
#X obj 597 8 inlet;
#X text 13 206 4 - the remainder is output from the right output of
the trigger first \, it has 1 added to it (right outlet) and then the
new count is stored for the next trigger;
#X text 14 256 5 - The count is then displayed (not 100% necessary)
;
#X obj 385 214 t f f;
#X connect 0 0 6 0;
#X connect 1 0 0 1;
#X connect 2 0 0 0;
#X connect 3 0 0 1;
#X connect 4 0 2 0;
#X connect 5 0 11 0;
#X connect 6 0 19 0;
#X connect 8 0 6 1;
#X connect 10 0 4 0;
#X connect 15 0 1 0;
#X connect 16 0 8 0;
#X connect 19 0 5 0;
#X connect 19 1 3 0;
#X restore 13 149 pd simpleCounter;
#X msg 13 64 5;
#X obj 13 82 t f f, f 8;
#X connect 0 0 8 0;
#X connect 8 0 16 0;
#X connect 10 0 14 0;
#X connect 11 0 13 1;
#X connect 12 0 1 0;
#X connect 12 1 2 0;
#X connect 12 2 3 0;
#X connect 12 3 4 0;
#X connect 12 4 5 0;
#X connect 13 0 12 0;
#X connect 14 0 15 0;
#X connect 14 1 11 0;
#X connect 15 0 13 0;
#X connect 16 0 17 0;
#X connect 17 0 10 0;
#X connect 17 1 15 1;
#X coords 0 -1 1 1 140 60 1 0 0;
#X restore 124 93 pd randomiser;
#N canvas 607 499 618 484 randomiser2 0;
#X obj 9 22 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1
;
#X obj 7 283 outlet;
#X text 244 106 This is essentially the same code we used to create
the random melody...;
#X text 26 22 <--- turn me on;
#X text 245 158 And instead of setting the slider values but not outputting
them I have removed the "set \$1" message so the sliders are both set
and trtheir output is triggered;
#X obj 50 283 outlet;
#X obj 8 160 random 600;
#X obj 9 95 t b b;
#X obj 78 160 random 600;
#X obj 9 43 metro 150;
#X connect 0 0 9 0;
#X connect 6 0 1 0;
#X connect 7 0 6 0;
#X connect 7 1 8 0;
#X connect 8 0 5 0;
#X connect 9 0 7 0;
#X coords 0 -1 1 1 140 60 1 0 0;
#X restore 589 118 pd randomiser2;
#X obj 589 290 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 589 257 pos \$1 \$2;
#X obj 592 186 hsl 70 10 0 600 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 670 186 hsl 70 10 0 600 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X obj 589 236 pack;
#X obj 667 206 t b f;
#X text 14 11 We can also use messages with variables to control aspects
of the appearance and functionality of objects dynamically;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 3 1;
#X connect 3 0 6 0;
#X connect 4 0 5 0;
#X connect 5 0 3 0;
#X connect 5 1 3 2;
#X connect 6 0 13 0;
#X connect 8 0 10 0;
#X connect 9 0 11 0;
#X connect 10 0 12 0;
#X connect 11 0 10 0;
#X connect 11 1 10 1;
#X connect 12 0 13 0;
#X connect 14 0 0 0;
#X connect 14 1 1 0;
#X connect 14 2 4 0;
#X connect 14 3 8 0;
#X connect 14 4 9 0;
#X connect 15 0 18 0;
#X connect 15 1 19 0;
#X connect 17 0 16 0;
#X connect 18 0 20 0;
#X connect 19 0 21 0;
#X connect 20 0 17 0;
#X connect 21 0 20 0;
#X connect 21 1 20 1;
#X restore 171 237 pd changing_parameters_and_appearances;
#X restore 873 340 pd message_variable_arguments;
#X obj 805 15 AUD6204_1.2_basic_pd_objects_1;
#X text 925 720 sjf \, SAE London \, 2020;
#X text 857 103 until;
#X obj 863 168 until;
#X msg 774 144 5, f 2;
#X msg 824 145 100;
#X text 743 216 WARNING: if you bang an "until" which doesn't have
a stopping mechanism \, Pd goes into an infinite loop!;
#X obj 863 195 print bangs;
#X obj 863 149 int;
#X text 24 1 Firstly \, turn OFF "Edit Mode" (cmd+e);
#X connect 3 0 4 0;
#X connect 5 0 7 0;
#X connect 6 0 8 0;
#X connect 9 0 2 0;
#X connect 14 0 87 0;
#X connect 15 0 87 1;
#X connect 17 0 19 0;
#X connect 18 0 17 1;
#X connect 22 0 17 0;
#X connect 24 0 25 0;
#X connect 26 0 24 1;
#X connect 27 0 24 0;
#X connect 29 0 31 1;
#X connect 30 0 31 0;
#X connect 31 0 28 0;
#X connect 32 0 31 2;
#X connect 38 0 46 0;
#X connect 39 0 46 0;
#X connect 40 0 46 0;
#X connect 42 0 44 0;
#X connect 42 1 45 0;
#X connect 43 0 42 0;
#X connect 46 0 37 0;
#X connect 46 1 34 0;
#X connect 46 2 41 0;
#X connect 46 3 35 0;
#X connect 46 4 36 0;
#X connect 48 0 54 1;
#X connect 50 0 54 0;
#X connect 52 0 55 0;
#X connect 53 0 54 0;
#X connect 54 0 49 0;
#X connect 55 0 51 0;
#X connect 56 0 55 1;
#X connect 57 0 55 1;
#X connect 58 0 55 0;
#X connect 59 0 54 0;
#X connect 65 0 72 0;
#X connect 67 0 72 0;
#X connect 68 0 72 1;
#X connect 72 0 66 0;
#X connect 82 0 86 0;
#X connect 83 0 82 0;
#X connect 84 0 82 0;
#X connect 87 0 82 0;
