#N canvas -1246 581 1081 606 10;
#X msg 36 332 \$1 5;
#X obj 36 353 line~;
#X obj 544 45 vradio 10 1 1 5 \$0-type_snd \$0-type_rec clip_type 0
-8 0 10 -262144 -1 -1 3;
#X text 555 83 tanh --> sin;
#X text 556 73 sin --> tanh;
#X text 554 42 bypass;
#X obj 135 491 outlet~;
#X obj 701 42 vsl 15 50 0 1 0 1 \$0-vol_snd \$0-vol_rec vol 0 -9 0
10 -262144 -1 -1 1200 1;
#X obj 36 310 r \$0-vol_snd;
#X obj 641 42 vsl 15 50 1 10 1 1 \$0-gain_snd \$0-gain_rec gain 0 -9
0 10 -262144 -1 -1 2000 1;
#X obj 72 35 inlet~;
#X obj 672 42 vsl 15 50 20 20000 1 1 \$0-tone_snd \$0-tone_rec tone
0 -9 0 10 -262144 -1 -1 4900 1;
#X obj 196 361 lop~, f 10;
#X obj 279 361 r \$0-tone_snd;
#X obj 67 68 send~ \$0-signal2distort;
#N canvas 0 23 450 300 sin_distortion 0;
#X obj 77 51 receive~ \$0-signal2distort;
#X obj 142 191 *~, f 21;
#X obj 142 212 outlet~;
#N canvas 0 23 450 300 sin 0;
#X obj 289 125 inlet~;
#X obj 289 219 expr~ sin($V1);
#X obj 289 267 outlet~;
#X obj 289 193 *~, f 12;
#X obj 390 157 inlet;
#X text 285 103 signal to distort;
#X text 389 134 gain;
#X text 30 9 This patch uses the expr~ object to give us the sin function
of the input;
#X text 30 37 This results in any input outside of the -1 --> 1 range
being folded back in to the range;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 3 0 1 0;
#X connect 4 0 3 1;
#X restore 142 170 pd sin;
#X text 3 170 Distortion inside --->;
#X obj 169 111 r \$0-gain_snd;
#X obj 243 49 r \$0-type_snd;
#X obj 266 83 == 1;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 3 0 1 0;
#X connect 5 0 3 1;
#X connect 6 0 7 0;
#X connect 7 0 1 1;
#X restore 196 311 pd sin_distortion;
#N canvas 0 23 450 300 wrap_distortion 0;
#N canvas -1280 581 1280 751 wraparaound 0;
#X obj 997 318 expr~ if($v1<-1 \, $v1 \, 0);
#X obj 736 371 expr~ if($v1> 1 \, $v1 \, 0);
#X obj 999 477 *~ -1;
#X obj 471 204 expr~ if($v1>=-1 \, $v1 \, 0);
#X obj 471 275 expr~ if($v1<= 1 \, $v1 \, 0);
#X obj 479 662 outlet~;
#X obj 999 499 expr~ sin($v1);
#X obj 663 42 inlet~;
#X obj 663 110 *~, f 12;
#X obj 764 74 inlet;
#X text 763 51 gain;
#X text 645 17 signal to distort;
#X text 71 14 This example is a bit more complex \, and uses a series
of expr~ objects with "if" statements to take any values between -1
& 1 and output them unchanged;
#X text 142 200 If the input value is greater than or equal to -1 then
output the value \, otherwise output 0;
#X text 124 275 If the input value is less than or equal to 1 then
output the value \, otherwise output 0;
#X text 71 50 Then we say any values that are greater than 1 should
be folded back into the range (using sin) but I multiply the signal
by -1 to invert it's polarity - this means that signals greater than
1 are folded back in from -1;
#X text 70 99 Finally we take signals less than -1 and fold them back
in from 1;
#X text 68 123 (Think PakMan going out the top of the world and coming
back in at the bottom);
#X text 915 476 Flip polarity;
#X text 822 499 Fold input back within range;
#X text 482 367 If the input value is greater than 1;
#X text 478 382 then output the value \, otherwise output 0;
#X text 742 311 If the input value is less than -1;
#X text 738 325 then output the value \, otherwise output 0;
#X text 67 157 REMEMBER: Multiplying signals by 0 gives us silence!
;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 6 0 5 0;
#X connect 7 0 8 0;
#X connect 8 0 3 0;
#X connect 8 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 8 1;
#X restore 185 198 pd wraparaound;
#X obj 200 48 receive~ \$0-signal2distort;
#X obj 185 219 *~, f 20;
#X obj 185 240 outlet~;
#X text 47 196 Distortion inside --->;
#X obj 309 70 r \$0-gain_snd;
#X obj 330 146 r \$0-type_snd;
#X obj 353 180 == 2;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 5 0 0 1;
#X connect 6 0 7 0;
#X connect 7 0 2 1;
#X restore 306 311 pd wrap_distortion;
#N canvas 0 23 450 300 tanh-->sin 0;
#N canvas 0 23 425 389 tanh2sin 0;
#X obj 103 50 inlet~;
#X obj 103 165 expr~ tanh($V1);
#X obj 103 270 outlet~;
#X obj 103 186 *~, f 22;
#X obj 242 141 inlet;
#X obj 103 217 expr~ sin($V1);
#X obj 103 71 *~;
#X text 98 30 signal to distort;
#X text 246 121 gain;
#X connect 0 0 6 0;
#X connect 1 0 3 0;
#X connect 3 0 5 0;
#X connect 4 0 3 1;
#X connect 4 0 6 1;
#X connect 5 0 2 0;
#X connect 6 0 1 0;
#X restore 229 157 pd tanh2sin;
#X obj 81 119 receive~ \$0-signal2distort;
#X obj 229 178 *~, f 21;
#X obj 229 199 outlet~;
#X text 56 14 This just takes two previous examples and rund them in
parallel (like a guitarist "stacking" overdrive pedals);
#X obj 241 58 r \$0-gain_snd;
#X obj 317 99 r \$0-type_snd;
#X obj 340 133 == 4;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 5 0 0 1;
#X connect 6 0 7 0;
#X connect 7 0 2 1;
#X restore 518 311 pd tanh-->sin;
#N canvas 0 23 450 300 sin--->tanh 0;
#N canvas 0 23 450 300 sin2tanh 0;
#X obj 37 37 inlet~;
#X obj 37 203 outlet~;
#X obj 37 126 *~, f 22;
#X obj 176 41 inlet;
#X obj 37 105 expr~ sin($V1);
#X obj 37 157 expr~ tanh($V1);
#X text 31 13 signal to distort;
#X text 178 22 gain;
#X obj 37 76 *~, f 16;
#X connect 0 0 8 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 3 0 8 1;
#X connect 4 0 2 0;
#X connect 5 0 1 0;
#X connect 8 0 4 0;
#X restore 268 209 pd sin2tanh;
#X obj 126 169 receive~ \$0-signal2distort;
#X obj 268 230 *~, f 17;
#X obj 268 251 outlet~;
#X text 56 14 This just takes two previous examples and rund them in
parallel (like a guitarist "stacking" overdrive pedals);
#X obj 280 110 r \$0-gain_snd;
#X obj 350 150 r \$0-type_snd;
#X obj 373 184 == 3;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 5 0 0 1;
#X connect 6 0 7 0;
#X connect 7 0 2 1;
#X restore 423 311 pd sin--->tanh;
#N canvas 0 23 450 300 bypass 0;
#X obj 161 119 *~;
#X obj 176 97 == 0;
#X obj 53 37 receive~ \$0-signal2distort;
#X obj 161 140 outlet~;
#X obj 175 61 r \$0-type_snd;
#X connect 0 0 3 0;
#X connect 1 0 0 1;
#X connect 2 0 0 0;
#X connect 4 0 1 0;
#X restore 132 310 pd bypass;
#X obj 117 423 *~;
#X text 555 53 sin;
#X text 556 63 wrap;
#X text 911 563 sjf \, SAE London \, 2020;
#X msg 471 382 \$1 5;
#X obj 471 403 line~;
#X obj 556 519 outlet~;
#X obj 471 360 r \$0-vol_snd;
#X obj 631 411 lop~, f 10;
#X obj 714 411 r \$0-tone_snd;
#N canvas -996 851 450 300 sin_distortion 0;
#X obj 142 191 *~, f 21;
#X obj 142 212 outlet~;
#N canvas 0 23 450 300 sin 0;
#X obj 289 125 inlet~;
#X obj 289 219 expr~ sin($V1);
#X obj 289 267 outlet~;
#X obj 289 193 *~, f 12;
#X obj 390 157 inlet;
#X text 285 103 signal to distort;
#X text 389 134 gain;
#X text 30 9 This patch uses the expr~ object to give us the sin function
of the input;
#X text 30 37 This results in any input outside of the -1 --> 1 range
being folded back in to the range;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 3 0 1 0;
#X connect 4 0 3 1;
#X restore 142 170 pd sin;
#X text 3 170 Distortion inside --->;
#X obj 169 111 r \$0-gain_snd;
#X obj 243 49 r \$0-type_snd;
#X obj 266 83 == 1;
#X obj 77 51 receive~ \$0-signal2distort2;
#X connect 0 0 1 0;
#X connect 2 0 0 0;
#X connect 4 0 2 1;
#X connect 5 0 6 0;
#X connect 6 0 0 1;
#X connect 7 0 2 0;
#X restore 631 361 pd sin_distortion;
#N canvas -1031 758 450 300 wrap_distortion 0;
#N canvas -1280 581 1280 751 wraparaound 0;
#X obj 997 318 expr~ if($v1<-1 \, $v1 \, 0);
#X obj 736 371 expr~ if($v1> 1 \, $v1 \, 0);
#X obj 999 477 *~ -1;
#X obj 471 204 expr~ if($v1>=-1 \, $v1 \, 0);
#X obj 471 275 expr~ if($v1<= 1 \, $v1 \, 0);
#X obj 479 662 outlet~;
#X obj 999 499 expr~ sin($v1);
#X obj 663 42 inlet~;
#X obj 663 110 *~, f 12;
#X obj 764 74 inlet;
#X text 763 51 gain;
#X text 645 17 signal to distort;
#X text 71 14 This example is a bit more complex \, and uses a series
of expr~ objects with "if" statements to take any values between -1
& 1 and output them unchanged;
#X text 142 200 If the input value is greater than or equal to -1 then
output the value \, otherwise output 0;
#X text 124 275 If the input value is less than or equal to 1 then
output the value \, otherwise output 0;
#X text 71 50 Then we say any values that are greater than 1 should
be folded back into the range (using sin) but I multiply the signal
by -1 to invert it's polarity - this means that signals greater than
1 are folded back in from -1;
#X text 70 99 Finally we take signals less than -1 and fold them back
in from 1;
#X text 68 123 (Think PakMan going out the top of the world and coming
back in at the bottom);
#X text 915 476 Flip polarity;
#X text 822 499 Fold input back within range;
#X text 482 367 If the input value is greater than 1;
#X text 478 382 then output the value \, otherwise output 0;
#X text 742 311 If the input value is less than -1;
#X text 738 325 then output the value \, otherwise output 0;
#X text 67 157 REMEMBER: Multiplying signals by 0 gives us silence!
;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 6 0 5 0;
#X connect 7 0 8 0;
#X connect 8 0 3 0;
#X connect 8 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 8 1;
#X restore 185 198 pd wraparaound;
#X obj 185 219 *~, f 20;
#X obj 185 240 outlet~;
#X text 47 196 Distortion inside --->;
#X obj 309 70 r \$0-gain_snd;
#X obj 330 146 r \$0-type_snd;
#X obj 353 180 == 2;
#X obj 200 49 receive~ \$0-signal2distort2;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 4 0 0 1;
#X connect 5 0 6 0;
#X connect 6 0 1 1;
#X connect 7 0 0 0;
#X restore 741 361 pd wrap_distortion;
#N canvas -1021 858 450 300 tanh-->sin 0;
#N canvas 0 23 425 389 tanh2sin 0;
#X obj 103 50 inlet~;
#X obj 103 165 expr~ tanh($V1);
#X obj 103 270 outlet~;
#X obj 103 186 *~, f 22;
#X obj 242 141 inlet;
#X obj 103 217 expr~ sin($V1);
#X obj 103 71 *~;
#X text 98 30 signal to distort;
#X text 246 121 gain;
#X connect 0 0 6 0;
#X connect 1 0 3 0;
#X connect 3 0 5 0;
#X connect 4 0 3 1;
#X connect 4 0 6 1;
#X connect 5 0 2 0;
#X connect 6 0 1 0;
#X restore 229 157 pd tanh2sin;
#X obj 229 178 *~, f 21;
#X obj 229 199 outlet~;
#X text 56 14 This just takes two previous examples and rund them in
parallel (like a guitarist "stacking" overdrive pedals);
#X obj 241 58 r \$0-gain_snd;
#X obj 317 99 r \$0-type_snd;
#X obj 340 133 == 4;
#X obj 81 119 receive~ \$0-signal2distort2;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 4 0 0 1;
#X connect 5 0 6 0;
#X connect 6 0 1 1;
#X connect 7 0 0 0;
#X restore 953 361 pd tanh-->sin;
#N canvas -1096 830 450 300 sin--->tanh 0;
#N canvas 0 23 450 300 sin2tanh 0;
#X obj 37 37 inlet~;
#X obj 37 203 outlet~;
#X obj 37 126 *~, f 22;
#X obj 176 41 inlet;
#X obj 37 105 expr~ sin($V1);
#X obj 37 157 expr~ tanh($V1);
#X text 31 13 signal to distort;
#X text 178 22 gain;
#X obj 37 76 *~, f 16;
#X connect 0 0 8 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 3 0 8 1;
#X connect 4 0 2 0;
#X connect 5 0 1 0;
#X connect 8 0 4 0;
#X restore 268 209 pd sin2tanh;
#X obj 268 230 *~, f 17;
#X obj 268 251 outlet~;
#X text 56 14 This just takes two previous examples and rund them in
parallel (like a guitarist "stacking" overdrive pedals);
#X obj 280 110 r \$0-gain_snd;
#X obj 350 150 r \$0-type_snd;
#X obj 373 184 == 3;
#X obj 126 169 receive~ \$0-signal2distort2;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 4 0 0 1;
#X connect 5 0 6 0;
#X connect 6 0 1 1;
#X connect 7 0 0 0;
#X restore 858 361 pd sin--->tanh;
#N canvas -896 713 450 300 bypass 0;
#X obj 161 119 *~;
#X obj 176 97 == 0;
#X obj 161 140 outlet~;
#X obj 175 61 r \$0-type_snd;
#X obj 53 37 receive~ \$0-signal2distort2;
#X connect 0 0 2 0;
#X connect 1 0 0 1;
#X connect 3 0 1 0;
#X connect 4 0 0 0;
#X restore 567 360 pd bypass;
#X obj 556 495 *~;
#X obj 220 37 inlet~;
#X obj 215 69 send~ \$0-signal2distort2;
#X obj 722 42 vsl 15 50 0 1 0 1 \$0-dry_snd \$0-dryl_rec dry 0 -9 0
10 -262144 -1 -1 4900 1;
#X obj 191 439 receive~ \$0-signal2distort;
#X obj 665 459 receive~ \$0-signal2distort2;
#X obj 191 460 *~;
#X obj 665 480 *~;
#X msg 709 504 \$1 5;
#X obj 709 525 line~;
#X obj 709 482 r \$0-dry_snd;
#X msg 243 491 \$1 5;
#X obj 243 512 line~;
#X obj 243 469 r \$0-dry_snd;
#X obj 927 423 loadbang;
#X obj 927 444 int \$0;
#X obj 927 465 outlet;
#X obj 909 421 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X connect 0 0 1 0;
#X connect 1 0 20 0;
#X connect 8 0 0 0;
#X connect 10 0 14 0;
#X connect 12 0 20 1;
#X connect 13 0 12 1;
#X connect 15 0 12 0;
#X connect 16 0 12 0;
#X connect 17 0 12 0;
#X connect 18 0 12 0;
#X connect 19 0 20 1;
#X connect 20 0 6 0;
#X connect 24 0 25 0;
#X connect 25 0 35 0;
#X connect 27 0 24 0;
#X connect 28 0 35 1;
#X connect 29 0 28 1;
#X connect 30 0 28 0;
#X connect 31 0 28 0;
#X connect 32 0 28 0;
#X connect 33 0 28 0;
#X connect 34 0 35 1;
#X connect 35 0 26 0;
#X connect 36 0 37 0;
#X connect 39 0 41 0;
#X connect 40 0 42 0;
#X connect 41 0 6 0;
#X connect 42 0 26 0;
#X connect 43 0 44 0;
#X connect 44 0 42 1;
#X connect 45 0 43 0;
#X connect 46 0 47 0;
#X connect 47 0 41 1;
#X connect 48 0 46 0;
#X connect 49 0 50 0;
#X connect 50 0 51 0;
#X connect 52 0 50 0;
#X coords 0 -1 1 1 200 90 1 540 10;
